 🛠️ Wave a Flag

Category: General Skills
Points: 10
Author: syreal
📄 Challenge Description

    Can you invoke help flags for a tool or binary?
    This program has extraordinarily helpful information...

📝 Solution

    Download the file from picoCTF and note it appears in your Downloads folder.
    Navigate to Downloads:

cd Downloads

    List files to confirm the downloaded binary:

ls

    Use the strings command to read any hidden printable text inside the file:

strings warm | grep -i pico

✅ Output:

Oh, help? I actually don't do much, but I do have this flag here: picoCTF{b1scu1ts_4nd_gr4vy_30e77291}

🎯 Flag

picoCTF{b1scu1ts_4nd_gr4vy_30e77291}

💡 Learning
The strings utility is useful to extract human-readable text from binary files and often reveals flags or hidden messages in CTF challenges.

🛠️ Tab, Tab, Attack

Category: General Skills
Points: 10
Author: syreal
📄 Challenge Description

    Using tab complete in the Terminal will add years to your life, especially when dealing with long rambling directory structures and filenames: Addadshashanammu.zip

📝 Solution

    Download the provided Addadshashanammu.zip file by simply clicking the download button in picoCTF.
    No need to move files using cd. You can directly run commands from your current location.

    List files to confirm the downloaded zip:

ls

    Unzip it to extract the contents:

unzip Addadshashanammu.zip

    It creates a deeply nested directory structure with a final file named fang-of-haynekhtnamet.
    Use the strings command with the full path to read any hidden printable text:
   
strings Addadshashanammu/Almurbalarammi/Ashalmimilkala/Assurnabitashpi/Maelkashishi/Onnissiralis/Ularradallaku/fang-of-haynekhtnamet

✅ Output contained:

*ZAP!* picoCTF{l3v3l_up!_t4k3_4_r35t!_524e3dc4}

🎯 Flag

picoCTF{l3v3l_up!_t4k3_4_r35t!_524e3dc4}

💡 Learning

    Tab completion saves time navigating long paths.
    strings quickly extracts human-readable data from binary files.
    There is no need to move into nested directories using cd; just use the full path when running commands like strings.

🌐 Insp3ct0r

Category: Web Exploitation
Points: 20
Author: zaratec/danny
📄 Challenge Description

    Kishor Balan tipped us off that the following code may need inspection:
    Challenge Link
    or Alternate Link

📝 Solution

    Opened the challenge link in the browser.
    Right-clicked the page → View Page Source.

        Found first part (1/3) of the flag in an HTML comment:

<!-- Html is neat. Anyways have 1/3 of the flag: picoCTF{tru3_d3 -->

✅ Location: Directly inside the HTML source of the main page.

    Noticed two linked files mentioned in the HTML <head> section:

<link rel="stylesheet" type="text/css" href="mycss.css">
<script type="application/javascript" src="myjs.js"></script>

    Clicked the CSS file link (mycss.css).

        Found second part (2/3) of the flag in a CSS comment:

/* You need CSS to make pretty pages. Here's part 2/3 of the flag: t3ct1ve_0r_ju5t */

✅ Location: Inside mycss.css.

    Clicked the JS file link (myjs.js).

        Found third part (3/3) of the flag in a JavaScript comment:

/* Javascript sure is neat. Anyways part 3/3 of the flag: _lucky?f10be399} */

✅ Location: Inside myjs.js.

    Assembled the flag parts together:

picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}

🎯 Flag

picoCTF{tru3_d3t3ct1ve_0r_ju5t_lucky?f10be399}

💡 Learning

    Always inspect page source code for hidden comments or clues.
    Check all linked CSS and JS files for additional hidden data.
    Note down where each flag part is located for clear documentation and revision.

🛠️ Strings it

Category: General Skills
Points: 10
Author: Sanjay C / Danny Tunitis
📄 Challenge Description

    Can you find the flag in file without running it?
    (Hint: Click the file to download.)

📝 Solution

    Downloaded the file named strings by clicking the challenge download link.
    Moved to the Downloads folder to check the file:

cd Downloads
ls

✅ File found: strings

    The challenge asks to find the flag without executing the file. Used the strings command to extract human-readable text from the binary:

strings strings

🔴 However, the output was too large to read directly.

    Therefore, used grep to filter only lines containing “pico”, efficiently finding the flag:

strings strings | grep -i pico

✅ Output:

picoCTF{5tRIng5_1T_7f766a23}

🎯 Flag

picoCTF{5tRIng5_1T_7f766a23}

💡 Learning

    The strings command extracts all printable strings from a binary or file.
    Combining it with grep filters large outputs to quickly find flags.
    No need to run unknown binaries, reducing risk while solving CTF challenges safely.

🛠️ First Grep

Category: General Skills
Points: 10
Author: Alex Fulton / Danny Tunitis
📄 Challenge Description

    Can you find the flag in file?
    This would be really tedious to look through manually, something tells me there is a better way.

📝 Solution

    Downloaded the file by clicking the download link in the challenge.
    Moved to the Downloads folder and checked files:

cd Downloads
ls

✅ File found: file

    Initially tried using:

cat file

🔴 Problem: The output was very large, making it hard to manually search for the flag.

    Therefore, used grep to filter lines containing "pico", efficiently finding the flag:

cat file | grep -i pico

✅ Output:

picoCTF{grep_is_good_to_find_things_f77e0797}

🎯 Flag

picoCTF{grep_is_good_to_find_things_f77e0797}

💡 Learning

    grep is a powerful tool to search specific keywords in large files quickly.
    Always use it with cat or directly as grep -i pico file to extract flags efficiently during CTF challenges.

🤖Where are the robots

Category: Web Exploitation
Points: 10
Author: zaratec / Danny
📄 Challenge Description

    Can you find the robots?
    Challenge Link
    or Alternate Link

📝 Solution

    Clicked the challenge link or copied it into the browser.

    On the main page, it displayed:

Welcome

Where are the robots?

    Hint interpretation: In web security, "robots" usually refers to robots.txt, a file that instructs web crawlers which URLs to avoid.

    Therefore, in the URL bar, appended /robots.txt:

https://jupiter.challenges.picoctf.org/problem/60915/robots.txt

✅ Found contents:

User-agent: *
Disallow: /8028f.html

    Navigated to the disallowed page:

https://jupiter.challenges.picoctf.org/problem/60915/8028f.html

✅ Page displayed:

Guess you found the robots
picoCTF{ca1cu1at1ng_Mach1n3s_8028f}

🎯 Flag

picoCTF{ca1cu1at1ng_Mach1n3s_8028f}

💡 Learning

    robots.txt files are used to control web crawler indexing but can unintentionally reveal hidden paths during CTFs.
    Always check /robots.txt in web challenges for hidden directories or files.

